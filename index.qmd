---
title: "Rstats-forStudents"
subtitle: For my current and potential students interested in learning R
author: 
  name: Soundarya S
  affiliation: ICMR-NIOH
  email: soundarya24@gmail.com
  degrees: MBBS, Ph.D.
keywords: "beginners, R basics, RStudio, tidyverse, best practices, packages, challenges, getting help"
format: 
  html: 
    toc: true
    toc-title: My contents
    code-fold: true
    code-summary: Show the code for this
theme: 
  light: sandstone
  dark: darkly
title-block-banner: "orange"
title-block-banner-color: "midnightblue"
number-sections: true
include-after-body: footer.Rhtml
---

```{r}
#| label: timestamp
#| echo: false
timestamp(prefix = "Last updated: ", suffix = ".")
```

------------------------------------------------------------------------

Have you read the about page? If not, head over to [About](about.html) to know more about this site.

First things first, have you installed RStudio inn your system?

If not, head over to [RStudio](https://www.rstudio.com/products/rstudio/download/) to download and install RStudio.

But before that you have to install R first which is also available for download from the same page.

Once you have installed R and RStudio, you are ready to go.

## R vs Rstudio

If you are wondering what is the difference between R and RStudio, then you are not alone.

> **If Rstudio is the driver of a car, R is the engine.**

![A car engine akin to R helps you drive it](car.jpg)

R is the programming language and RStudio is the integrated development environment (IDE) for R. Rstudio makes codes much easier and hence it is very useful to write codes there as a beginner. I know you want to know how.

::: {.callout-note appearance="minimal"}
## Know how RStudio makes your job easier

1.  RStudio has inbuilt prompts that helps you finish the codes. *You can imagine it like your mobile which suggests the word as you type.*
2.  It also has a console where you can run the codes and see the output.
3.  It also has a file explorer, a plot window, a help window and a package manager.

All these makes it much easier for beginner to learn in RStudio.
:::

Once you installed R and RStudio, you are free to work on RStudio even without opening R. Open it to familiarize with its interface.

## RStudio Interface

The RStudio interface is divided into four panes:

Introduce yourself to them by reading about them [here](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html).

Also, you can move them around and customize per your preferences. For this, go to Tools-\> Global options -\> Pane layout

## Start with coding

Now that you have installed R and RStudio, you are ready to start coding. Type the following code in the console and press enter; and you will see the output.

```{r}
1 + 1
print("Hello World!")
```

Alright. You have successfully run your first code in RStudio. You can also run the code by writing them first as a script.

::: callout-important
## Well, I am not a coder!

This is a common feeling when we start with R, particularly if we are not used to programming. Even I was not a programmer when i started learning R.

[![Read about curbing this feeling](rbeginner.jpeg){fig-align="center"}](https://x.com/SoundaryaRak/status/1656970220647620608?s=20)
:::

## End in mind

There are many things you can do in RStudio. Broadly for a beginner, you can do the following:

1.  Data analysis
2.  Data visualization
3.  Report writing

You can pick any of the above and start learning or mix and match them as you learn, like I did.

::: callout-tip
## What to aim if I am a total beginner

I would suggest data visualization as it is rewarding. If you are here because your project required a particular analyses, then you might want to begin there. Report writing may require skills of 1 and 2 and maybe prioritized down the line.
:::

## Basic best practices

In my R journey, I have learned a few things that I would like to share with you:

To shine and be a good programmer, you need to write clean and readable codes, learn to organize them meaningfully. You can do this by following the best practices. I have these following suggesstions for you to begin with.

1.  **Writing scripts**: Write your codes in a script file and run them in the console. This way you can keep track of your codes and run them whenever you want. Read about writing scripts in RStudio [here](https://ss-myrspace.netlify.app/posts/2021-08-03-using-r-scripts-effectively-even-as-a-beginner/).

2.  **Projects**: Create a project in RStudio for each of your work. This way you can keep all the files related to a project in one place. Read about creating projects in RStudio [here](https://ss-myrspace.netlify.app/posts/2021-08-03-starting-projects-in-rstudio/).

3.  **Importing data**: Import your data into RStudio using the `readr` package. Read about importing data in RStudio [here](https://ss-myrspace.netlify.app/posts/2021-05-13-how-to-import-your-data-into-r/).

Click [here](https://style.tidyverse.org/) to know more about the best practices in R.

[![My tweet for beginners on best practices](tweet-bestpractices.png){fig-align="center"}](https://x.com/SoundaryaRak/status/1663780092722688001?s=20)

## What are packages?

Packages are the building blocks of R. They are the collection of functions, data and documentation in R. You can think of them as the apps in your mobile. You can install them from the CRAN repository and use them in your codes. How to install them is described later.

You may have to install the package you want only once, but load them every time you start a new session. I would think this as electricity and using fans/lights at home. When you build a new home, you have to install the electricity connection only once, but you have to switch on the fans/lights every time you use them. Installing packages is like installing the electricity connection and loading them is like switching on the fans/lights.

![Load the packages like you switch on the fan every time you need](switch.jpg){fig-align="center"}

You can install and load a package using the following code: `install.packages("package_name")` and `library(package_name)` respectively.

I highly suggest you start with the `tidyverse` package. It is a collection of packages that are designed to work together. You can install and load the `tidyverse` package using the following code: `install.packages("tidyverse")` and `library(tidyverse)` respectively. Learn more about the `tidyverse` package [here](https://www.tidyverse.org/).

## Challenges and getting help

You may face challenges while learning R. But don't worry, you are not alone. There are many resources available to help you. You can ask your friends, colleagues, teachers, or even the internet. To be a better asker (is that even a word?), learn to make a reproducible example. You can learn more about it [here](https://www.tidyverse.org/help/#reprex). This will help you recreate your error and share it with others to get help.
